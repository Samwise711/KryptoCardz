'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../../routes');

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\Dan\\Downloads\\KryptoCardz\\Project\\pages\\campaigns\\mydeck.js?entry';
//import Campaign from '../../ethereum/campaign';
//import axios from 'axios';


// class based component

var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    (0, _classCallCheck3.default)(this, CampaignIndex);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'renderCampaigns',

    //dynamically compute route for description tag below
    value: function renderCampaigns() {

      //const accounts = await web3.eth.getAccounts();
      //const ownerCards = await factory.methods.getCardsByOwner(accounts[0]).call();

      var items = this.props.newArray.map(function (request, index) {
        return {
          image: _react2.default.createElement('img', { src: 'https://storage.googleapis.com/cryptocardz-c5066.appspot.com/' + (parseInt(request.Id) + 1) + '.png', width: '150', style: { marginLeft: '50px', marginTop: '15px', marginBottom: '15px' }, __source: {
              fileName: _jsxFileName,
              lineNumber: 50
            }
          }),
          header: request.Name,
          meta: _web2.default.utils.fromWei(request.Price, 'ether') + " ETH",
          href: '/campaigns/' + request.Id
          //fluid: true  // causes cards to go full width of frame
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, itemsPerRow: 3, __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, _react2.default.createElement('h3', { style: { marginTop: '25px' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, 'My Deck'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 12, __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }, this.renderCampaigns()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 4, __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        }
      }, _react2.default.createElement('div', { 'class': 'right floated left aligned six wide column', __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }, _react2.default.createElement('div', { 'class': 'ui segment', __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, _react2.default.createElement('h3', { align: 'center', __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, 'Statistics'), _react2.default.createElement('div', { 'class': 'ui horizontal statistics', __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }, _react2.default.createElement('div', { 'class': 'statistic', __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, _react2.default.createElement('div', { 'class': 'value', __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, this.props.newArray.length), _react2.default.createElement('div', { 'class': 'label', __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }, this.props.title)), _react2.default.createElement('div', { 'class': 'statistic', __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, _react2.default.createElement('div', { 'class': 'value', __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, this.props.createdCount), _react2.default.createElement('div', { 'class': 'label', __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      }, 'Created')), _react2.default.createElement('div', { 'class': 'statistic', __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }, _react2.default.createElement('div', { 'class': 'value', __source: {
          fileName: _jsxFileName,
          lineNumber: 95
        }
      }, this.props.soldCount), _react2.default.createElement('div', { 'class': 'label', __source: {
          fileName: _jsxFileName,
          lineNumber: 98
        }
      }, 'Sold')))))))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var accounts, ownerCards, createdCount, soldCount, structCount, allStructs, newArray, doIt, title;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _web2.default.eth.getAccounts();

              case 2:
                accounts = _context.sent;
                _context.next = 5;
                return _factory2.default.methods.getCardsByOwner(accounts[0]).call();

              case 5:
                ownerCards = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.getCreatedCount(accounts[0]).call();

              case 8:
                createdCount = _context.sent;
                _context.next = 11;
                return _factory2.default.methods.getSoldCount(accounts[0]).call();

              case 11:
                soldCount = _context.sent;
                _context.next = 14;
                return _factory2.default.methods.getStructCount().call();

              case 14:
                structCount = _context.sent;
                _context.next = 17;
                return _promise2.default.all( // get array of solidity Structs, trick
                Array(parseInt(structCount)).fill().map(function (element, index) {
                  return _factory2.default.methods.campaignStructs(index).call();
                }));

              case 17:
                allStructs = _context.sent;
                _context.next = 20;
                return [];

              case 20:
                newArray = _context.sent;
                _context.next = 23;
                return ownerCards.forEach(function (element) {
                  newArray.push(allStructs[element]);
                });

              case 23:
                doIt = _context.sent;
                title = 'Cards Total';

                if (newArray.length == 1) {
                  title = 'Card Total';
                }

                return _context.abrupt('return', { allStructs: allStructs, newArray: newArray, title: title, createdCount: createdCount, soldCount: soldCount });

              case 27:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;

// Next also requires react component to be exported for each wep page file,
// as seen on line 17

//npm run dev => starts web app
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,