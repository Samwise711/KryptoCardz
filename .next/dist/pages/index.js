'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _LayoutSearch = require('../components/LayoutSearch');

var _LayoutSearch2 = _interopRequireDefault(_LayoutSearch);

var _routes = require('../routes');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _SearchSortPart = require('../components/SearchSortPart');

var _SearchSortPart2 = _interopRequireDefault(_SearchSortPart);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\Dan\\Documents\\GitHub\\kryptocardz-test\\KryptoCardz\\pages\\index.js?entry';
//import Campaign from '../ethereum/campaign';
//import axios from 'axios';


// class based component

var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CampaignIndex);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      sortBy1: 'created',
      sortBy2: 'Low to high'
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'renderCampaigns',

    //dynamically compute route for description tag below
    value: function renderCampaigns() {
      var _state = this.state,
          sortBy1 = _state.sortBy1,
          sortBy2 = _state.sortBy2;

      //const accounts = await web3.eth.getAccounts();
      //const ownerCards = await factory.methods.getCardsByOwner(accounts[0]).call();

      var items = this.props.allStructs.map(function (request, index) {
        return {

          image: _react2.default.createElement('img', { src: 'https://storage.googleapis.com/cryptocardz-c5066.appspot.com/' + (parseInt(request.Id) + 1) + '.png', width: '150', style: { marginLeft: '70px', marginTop: '15px', marginBottom: '15px', pointerEvents: 'none' }, __source: {
              fileName: _jsxFileName,
              lineNumber: 61
            }
          }),
          header: request.Name,
          meta: _web2.default.utils.fromWei(request.Price, 'ether') + " ETH",
          href: '/campaigns/' + request.Id,
          created: request.CreatedDate
          //fluid: true  // causes cards to go full width of frame
        };
      });
      items.sort(function (a, b) {
        if (a[sortBy1] > b[sortBy1]) return 1;
        if (a[sortBy1] < b[sortBy1]) return -1;
        if (a[sortBy1] === b[sortBy1]) return 0;
      });

      if (sortBy2 === 'High to low') items.reverse();
      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var searchValue = this.state.searchValue;

      var searchHandler = function searchHandler(event) {
        return _this2.setState({ searchValue: event.target.value });
      };
      var sort1Handler = function sort1Handler(event, data) {
        return _this2.setState({ sortBy1: data.value });
      };
      var sort2Handler = function sort2Handler(event, data) {
        return _this2.setState({ sortBy2: data.value });
      };

      return _react2.default.createElement(_LayoutSearch2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, _react2.default.createElement('div', { style: { marginTop: '25px' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      }, 'Marketplace'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }, _react2.default.createElement(_SearchSortPart2.default, {
        searchHandler: searchHandler,
        searchValue: searchValue,
        sort1Handler: sort1Handler,
        sort2Handler: sort2Handler,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      }, _react2.default.createElement('div', { style: { marginLeft: '15px', marginTop: '10px', marginRight: '15px' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 100
        }
      }, this.renderCampaigns())))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var structCount, allStructs;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getStructCount().call();

              case 2:
                structCount = _context.sent;
                _context.next = 5;
                return _promise2.default.all( // get array of solidity Structs, trick
                Array(parseInt(structCount)).fill().map(function (element, index) {
                  return _factory2.default.methods.campaignStructs(index).call();
                }));

              case 5:
                allStructs = _context.sent;
                return _context.abrupt('return', { allStructs: allStructs });

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref2.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;

// Next also requires react component to be exported for each wep page file,
// as seen on line 17

//npm run dev => starts web app
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwidmFsdWUiLCJzb3J0QnkxIiwic29ydEJ5MiIsImtleSIsInJlbmRlckNhbXBhaWducyIsIl9zdGF0ZSIsIml0ZW1zIiwicHJvcHMiLCJhbGxTdHJ1Y3RzIiwibWFwIiwicmVxdWVzdCIsImluZGV4IiwiaW1hZ2UiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwicGFyc2VJbnQiLCJJZCIsIndpZHRoIiwic3R5bGUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwicG9pbnRlckV2ZW50cyIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiaGVhZGVyIiwiTmFtZSIsIm1ldGEiLCJ1dGlscyIsImZyb21XZWkiLCJQcmljZSIsImhyZWYiLCJjcmVhdGVkIiwiQ3JlYXRlZERhdGUiLCJzb3J0IiwiYSIsImIiLCJyZXZlcnNlIiwiR3JvdXAiLCJyZW5kZXIiLCJfdGhpczIiLCJzZWFyY2hWYWx1ZSIsInNlYXJjaEhhbmRsZXIiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0Iiwic29ydDFIYW5kbGVyIiwiZGF0YSIsInNvcnQySGFuZGxlciIsIlJvdyIsIm1hcmdpblJpZ2h0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsInN0cnVjdENvdW50Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXRTdHJ1Y3RDb3VudCIsInNlbnQiLCJhbGwiLCJmaWxsIiwiZWxlbWVudCIsImNhbXBhaWduU3RydWN0cyIsImFicnVwdCIsInN0b3AiLCJn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USxpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsR0FBbUI7QUFDdEYsWUFBSUMsV0FBSixFQUFpQi9DLFVBQWpCO0FBQ0EsZUFBTyxzQkFBb0JnRCxJQUFwQixDQUF5QixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUMxRCxpQkFBTyxDQUFQLEVBQVU7QUFDUixvQkFBUUEsU0FBU0MsSUFBVCxHQUFnQkQsU0FBU0UsSUFBakM7QUFDRSxtQkFBSyxDQUFMO0FBQ0VGLHlCQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsdUJBQU8sa0JBQVFDLE9BQVIsQ0FBZ0JDLGNBQWhCLEdBQWlDbEUsSUFBakMsRUFBUDs7QUFFRixtQkFBSyxDQUFMO0FBQ0UyRCw4QkFBY0csU0FBU0ssSUFBdkI7QUFDQUwseUJBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSx1QkFBTyxrQkFBU0ksR0FBVCxFQUFjO0FBQ3JCdkUsc0JBQU1zQixTQUFTd0MsV0FBVCxDQUFOLEVBQTZCVSxJQUE3QixHQUFvQ3hELEdBQXBDLENBQXdDLFVBQVV5RCxPQUFWLEVBQW1CdkQsS0FBbkIsRUFBMEI7QUFDaEUseUJBQU8sa0JBQVFrRCxPQUFSLENBQWdCTSxlQUFoQixDQUFnQ3hELEtBQWhDLEVBQXVDZixJQUF2QyxFQUFQO0FBQ0QsaUJBRkQsQ0FETyxDQUFQOztBQUtGLG1CQUFLLENBQUw7QUFDRVksNkJBQWFrRCxTQUFTSyxJQUF0QjtBQUNBLHVCQUFPTCxTQUFTVSxNQUFULENBQWdCLFFBQWhCLEVBQTBCLEVBQUU1RCxZQUFZQSxVQUFkLEVBQTFCLENBQVA7O0FBRUYsbUJBQUssQ0FBTDtBQUNBLG1CQUFLLEtBQUw7QUFDRSx1QkFBT2tELFNBQVNXLElBQVQsRUFBUDtBQW5CSjtBQXFCRDtBQUNGLFNBeEJNLEVBd0JKZixPQXhCSSxFQXdCSyxJQXhCTCxDQUFQO0FBeUJELE9BM0IyQyxDQUFoQyxDQUFaOztBQTZCQSxlQUFTZ0IsZUFBVCxHQUEyQjtBQUN6QixlQUFPbEIsTUFBTXZELEtBQU4sQ0FBWSxJQUFaLEVBQWtCUCxTQUFsQixDQUFQO0FBQ0Q7O0FBRUQsYUFBT2dGLGVBQVA7QUFDRCxLQW5DTTtBQUZKLEdBQUQsQ0EzSEo7O0FBbUtBLFNBQU92RixhQUFQO0FBQ0QsQ0F6TG1CLGtCQUFwQjs7a0JBMkxlQSxhOztBQUVmO0FBQ0E7O0FBRUEiLCJmaWxlIjoidW5rbm93biJ9