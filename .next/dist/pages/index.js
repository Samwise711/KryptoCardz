'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _LayoutSearch = require('../components/LayoutSearch');

var _LayoutSearch2 = _interopRequireDefault(_LayoutSearch);

var _routes = require('../routes');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _SearchSortPart = require('../components/SearchSortPart');

var _SearchSortPart2 = _interopRequireDefault(_SearchSortPart);

var _shapeshift = require('shapeshift.io');

var _shapeshift2 = _interopRequireDefault(_shapeshift);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\Dan\\Documents\\GitHub\\kryptocardz-test\\KryptoCardz\\pages\\index.js?entry';
//import Campaign from '../ethereum/campaign';
//import axios from 'axios';


// class based component

var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CampaignIndex);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      searchValue: '',
      sortBy1: 'created',
      sortBy2: 'Low to high'
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'renderCampaigns',

    //dynamically compute route for description tag below
    value: function renderCampaigns() {
      var _state = this.state,
          sortBy1 = _state.sortBy1,
          sortBy2 = _state.sortBy2,
          searchValue = _state.searchValue;

      //const accounts = await web3.eth.getAccounts();
      //const ownerCards = await factory.methods.getCardsByOwner(accounts[0]).call();

      var items = this.props.allStructs.map(function (request, index) {
        return {

          image: _react2.default.createElement('img', { src: 'https://storage.googleapis.com/cryptocardz-c5066.appspot.com/' + (parseInt(request.Id) + 1) + '.png', width: '150', style: { marginLeft: '70px', marginTop: '15px', marginBottom: '15px', pointerEvents: 'none' }, __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          }),
          header: request.Name,
          meta: _web2.default.utils.fromWei(request.Price, 'ether') + " ETH",
          href: '/campaigns/' + request.Id,
          created: request.CreatedDate
          //fluid: true  // causes cards to go full width of frame
        };
      });
      items.sort(function (a, b) {
        if (a[sortBy1] > b[sortBy1]) return 1;
        if (a[sortBy1] < b[sortBy1]) return -1;
        if (a[sortBy1] === b[sortBy1]) return 0;
      });

      if (sortBy2 === 'High to low') items.reverse();

      if (searchValue !== '') {
        items = items.filter(function (item) {
          return item.header.toLowerCase().includes(searchValue.toLowerCase());
        });
      }

      _shapeshift2.default.coins(function (err, coinData) {
        console.log(coinData); // =>
      });

      var pair = 'btc_eth';

      _shapeshift2.default.exchangeRate(pair, function (err, rate) {
        console.log(rate); // => '158.71815287'
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 98
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var searchValue = this.state.searchValue;

      var searchHandler = function searchHandler(event) {
        return _this2.setState({ searchValue: event.target.value });
      };
      var sort1Handler = function sort1Handler(event, data) {
        return _this2.setState({ sortBy1: data.value });
      };
      var sort2Handler = function sort2Handler(event, data) {
        return _this2.setState({ sortBy2: data.value });
      };

      return _react2.default.createElement(_LayoutSearch2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112
        }
      }, _react2.default.createElement('div', { style: { marginTop: '25px' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 113
        }
      }, _react2.default.createElement(_semanticUiReact.Message, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 114
        }
      }, _react2.default.createElement(_semanticUiReact.Message.Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }, 'Site Requirements'), _react2.default.createElement('p', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 116
        }
      }, 'Please be using MetaMask and the Ropsten Test Net to interact with this application. Otherwise errors may be thrown.')), _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 120
        }
      }, 'Marketplace'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 123
        }
      }, _react2.default.createElement(_SearchSortPart2.default, {
        searchHandler: searchHandler,
        searchValue: searchValue,
        sort1Handler: sort1Handler,
        sort2Handler: sort2Handler,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 124
        }
      }), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 130
        }
      }, _react2.default.createElement('div', { style: { marginLeft: '15px', marginTop: '10px', marginRight: '15px' }, __source: {
          fileName: _jsxFileName,
          lineNumber: 131
        }
      }, this.renderCampaigns())))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var structCount, allStructs;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getStructCount().call();

              case 2:
                structCount = _context.sent;
                _context.next = 5;
                return _promise2.default.all( // get array of solidity Structs, trick
                Array(parseInt(structCount)).fill().map(function (element, index) {
                  return _factory2.default.methods.campaignStructs(index).call();
                }));

              case 5:
                allStructs = _context.sent;
                return _context.abrupt('return', { allStructs: allStructs });

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref2.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;

// Next also requires react component to be exported for each wep page file,
// as seen on line 17

//npm run dev => starts web app
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,